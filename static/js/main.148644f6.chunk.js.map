{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","utils/filterFunc.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","value","initialValue","query","status","filterReducer","todosReducer","todos","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","selectedTodo","dispatch","visibleTodos","useMemo","copyTodos","normalizedQuery","trim","toLowerCase","title","includes","completed","preparedTodos","className","map","classNames","id","onClick","CurentTodoAction","isSelected","TodoFilter","onSubmit","event","preventDefault","onChange","e","FilterActions","target","placeholder","length","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","useEffect","userId","href","email","name","App","loading","setLoading","TodoAction","catch","error","Error","message","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.148644f6.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetQueryAction = {\n  type: 'query/SetQuery',\n  payload: string,\n};\ntype ClearQueryAction = {\n  type: 'query/ClearQuery',\n};\n\ntype SetStatusAction = {\n  type: 'status/SetStatus',\n  payload: string,\n};\n\nconst SetQuery = (value: string):SetQueryAction => ({\n  type: 'query/SetQuery',\n  payload: value,\n});\nconst ClearQuery = ():ClearQueryAction => ({\n  type: 'query/ClearQuery',\n});\n\nconst SetStatus = (value: string):SetStatusAction => ({\n  type: 'status/SetStatus',\n  payload: value,\n});\n\nexport const actions = { SetQuery, ClearQuery, SetStatus };\n\ntype Action = SetQueryAction | ClearQueryAction | SetStatusAction;\n\ntype InitVal = {\n  query: string,\n  status: string,\n};\nconst initialValue = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  value:InitVal = initialValue,\n  action:Action,\n) => {\n  switch (action.type) {\n    case 'query/SetQuery':\n      return {\n        ...value, query: action.payload,\n      };\n    case 'query/ClearQuery':\n      return {\n        ...value, query: '',\n      };\n    case 'status/SetStatus':\n      return {\n        ...value, status: action.payload,\n      };\n\n    default:\n      return value;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodoAction = {\n  type: 'todos/Set',\n  payload: Todo[]\n};\n\nconst SetTodos = (value: Todo[]): SetTodoAction => ({\n  type: 'todos/Set',\n  payload: value,\n});\n\nexport const actions = { SetTodos };\n\nconst initialValue :Todo[] = [];\n\nconst todosReducer = (\n  todos = initialValue,\n  action: SetTodoAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/Set':\n\n      return [...todos, ...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React, { useMemo } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { preparedTodos } from '../../utils/filterFunc';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as CurentTodoAction } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const { status, query } = useAppSelector(state => state.filter);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const isSelected = (todo:Todo) => {\n    if (selectedTodo?.id === todo.id) {\n      dispatch(CurentTodoAction.removeTodo());\n\n      return;\n    }\n\n    dispatch(CurentTodoAction.setTodo(todo));\n  };\n\n  const visibleTodos = useMemo(\n    () => preparedTodos(todos, query, status),\n    [todos, query, status],\n  );\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          visibleTodos.map(todo => (\n            <tr\n              data-cy=\"todo\"\n              key={todo.id}\n              className={classNames(\n                { 'has-background-info-light': selectedTodo?.id === todo.id },\n              )}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => isSelected(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      { 'far fa-eye': selectedTodo?.id !== todo.id },\n                      { 'far fa-eye-slash': selectedTodo?.id === todo.id },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport const preparedTodos = (\n  todos: Todo[],\n  query: string,\n  status: string,\n) => {\n  let copyTodos = [...todos];\n\n  if (query) {\n    const normalizedQuery = query.trim().toLowerCase();\n\n    copyTodos = copyTodos.filter(\n      todo => todo.title.toLowerCase().includes(normalizedQuery),\n    );\n  }\n\n  if (status) {\n    switch (status) {\n      case 'active':\n        copyTodos = copyTodos.filter(todo => !todo.completed);\n        break;\n\n      case 'completed':\n        copyTodos = copyTodos.filter(todo => todo.completed);\n        break;\n\n      case 'all':\n      default:\n        return copyTodos;\n    }\n  }\n\n  return copyTodos;\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as FilterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query } = useAppSelector(state => state.filter);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e) => dispatch(FilterActions.SetStatus(e.target.value))}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => dispatch(FilterActions.SetQuery(e.target.value))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {query.length > 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(FilterActions.ClearQuery())}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(setUser);\n    }\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(actions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as TodoAction } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setLoading(true);\n\n    getTodos()\n      .then((todos:Todo[]) => dispatch(TodoAction.SetTodos(todos)))\n      .catch((error) => {\n        throw new Error(error.message);\n      })\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {loading\n                ? <Loader />\n                : (\n                  <TodoList />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {\n        selectedTodo && (\n          <TodoModal />\n        )\n      }\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}